apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  annotations:
    pipeline.tekton.dev/release: 77f7b15
    tekton.dev/tags: git
    pipeline.openshift.io/started-by: user14
    tekton.dev/categories: Git
    chains.tekton.dev/signed: 'true'
    openshift.io/installed-from: tektonhub
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le,linux/arm64'
    tekton.dev/pipelines.minVersion: 0.38.0
    tekton.dev/displayName: git clone
  resourceVersion: '5381698'
  name: collabothon-2023-fbus9j-git-clone
  uid: 925335bd-4db7-4e26-bbbe-4cbc8847ce9a
  creationTimestamp: '2023-10-22T07:21:42Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:tekton.dev/platforms': {}
            .: {}
            'f:pipeline.tekton.dev/release': {}
            'f:tekton.dev/displayName': {}
            'f:tekton.dev/tags': {}
            'f:tekton.dev/categories': {}
            'f:openshift.io/installed-from': {}
            'f:tekton.dev/pipelines.minVersion': {}
            'f:pipeline.openshift.io/started-by': {}
          'f:labels':
            .: {}
            'f:app.kubernetes.io/version': {}
            'f:tekton.dev/memberOf': {}
            'f:tekton.dev/pipeline': {}
            'f:tekton.dev/pipelineRun': {}
            'f:tekton.dev/pipelineTask': {}
            'f:tekton.dev/task': {}
          'f:ownerReferences':
            .: {}
            'k:{"uid":"b46b24b0-a41f-4594-9577-0da6d563ce21"}': {}
        'f:spec':
          .: {}
          'f:params': {}
          'f:serviceAccountName': {}
          'f:taskRef':
            .: {}
            'f:kind': {}
            'f:name': {}
          'f:workspaces': {}
      manager: openshift-pipelines-controller
      operation: Update
      time: '2023-10-22T07:21:42Z'
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:chains.tekton.dev/signed': {}
          'f:finalizers':
            .: {}
            'v:"chains.tekton.dev"': {}
      manager: openshift-pipelines-chains-controller
      operation: Update
      time: '2023-10-22T07:21:55Z'
    - apiVersion: tekton.dev/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          'f:completionTime': {}
          'f:conditions': {}
          'f:podName': {}
          'f:provenance':
            .: {}
            'f:featureFlags':
              'f:ScopeWhenExpressionsToTask': {}
              'f:SetSecurityContext': {}
              'f:DisableCredsInit': {}
              'f:DisableAffinityAssistant': {}
              'f:VerificationNoMatchPolicy': {}
              'f:RunningInEnvWithInjectedSidecars': {}
              'f:EnableTektonOCIBundles': {}
              .: {}
              'f:MaxResultSize': {}
              'f:AwaitSidecarReadiness': {}
              'f:EnableProvenanceInStatus': {}
              'f:Coschedule': {}
              'f:ResultExtractionMethod': {}
              'f:EnableAPIFields': {}
              'f:RequireGitSSHSecretKnownHosts': {}
              'f:EnforceNonfalsifiability': {}
              'f:SendCloudEventsForRuns': {}
          'f:results': {}
          'f:startTime': {}
          'f:steps': {}
          'f:taskSpec':
            .: {}
            'f:description': {}
            'f:params': {}
            'f:results': {}
            'f:steps': {}
            'f:workspaces': {}
      manager: openshift-pipelines-controller
      operation: Update
      subresource: status
      time: '2023-10-22T07:21:55Z'
  namespace: collabothon-2023-sf
  ownerReferences:
    - apiVersion: tekton.dev/v1
      blockOwnerDeletion: true
      controller: true
      kind: PipelineRun
      name: collabothon-2023-fbus9j
      uid: b46b24b0-a41f-4594-9577-0da6d563ce21
  finalizers:
    - chains.tekton.dev
  labels:
    app.kubernetes.io/managed-by: tekton-pipelines
    app.kubernetes.io/version: '0.9'
    tekton.dev/memberOf: tasks
    tekton.dev/pipeline: collabothon-2023
    tekton.dev/pipelineRun: collabothon-2023-fbus9j
    tekton.dev/pipelineTask: git-clone
    tekton.dev/task: git-clone
spec:
  params:
    - name: url
      value: 'https://github.com/kvabakoma/collabothon2023-frontend.git'
    - name: revision
      value: ''
    - name: refspec
      value: ''
    - name: submodules
      value: 'true'
    - name: depth
      value: '1'
    - name: sslVerify
      value: 'true'
    - name: crtFileName
      value: ca-bundle.crt
    - name: subdirectory
      value: ''
    - name: sparseCheckoutDirectories
      value: ''
    - name: deleteExisting
      value: 'true'
    - name: httpProxy
      value: ''
    - name: httpsProxy
      value: ''
    - name: noProxy
      value: ''
    - name: verbose
      value: 'true'
    - name: gitInitImage
      value: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2'
    - name: userHome
      value: /home/git
  serviceAccountName: pipeline
  taskRef:
    kind: Task
    name: git-clone
  timeout: 1h0m0s
  workspaces:
    - name: output
      persistentVolumeClaim:
        claimName: pvc-0d86b9a0f1
status:
  completionTime: '2023-10-22T07:21:55Z'
  conditions:
    - lastTransitionTime: '2023-10-22T07:21:55Z'
      message: All Steps have completed executing
      reason: Succeeded
      status: 'True'
      type: Succeeded
  podName: collabothon-2023-fbus9j-git-clone-pod
  provenance:
    featureFlags:
      MaxResultSize: 4096
      AwaitSidecarReadiness: true
      Coschedule: workspaces
      ResultExtractionMethod: termination-message
      SendCloudEventsForRuns: false
      EnforceNonfalsifiability: ''
      ScopeWhenExpressionsToTask: false
      SetSecurityContext: false
      DisableCredsInit: false
      DisableAffinityAssistant: true
      EnableAPIFields: beta
      RequireGitSSHSecretKnownHosts: false
      RunningInEnvWithInjectedSidecars: true
      EnableTektonOCIBundles: false
      VerificationNoMatchPolicy: ignore
      EnableProvenanceInStatus: true
  startTime: '2023-10-22T07:21:42Z'
  steps:
    - container: step-clone
      imageID: >-
        gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init@sha256:176c1d67371296b29447cef5478ad50cc6546ad858d34122e626b3a12d225436
      name: clone
      terminated:
        containerID: >-
          cri-o://92e1edc3e28b0c36c75cdb2793674c28e2203cc4e83615cbe69d42174b107771
        exitCode: 0
        finishedAt: '2023-10-22T07:21:54Z'
        message: >-
          [{"key":"commit","value":"1317a123c8380b0b45b35cdccc9d8ca55172a0f2","type":1},{"key":"committer-date","value":"1697957433","type":1},{"key":"url","value":"https://github.com/kvabakoma/collabothon2023-frontend.git","type":1}]
        reason: Completed
        startedAt: '2023-10-22T07:21:54Z'
  taskResults:
    - name: commit
      type: string
      value: 1317a123c8380b0b45b35cdccc9d8ca55172a0f2
    - name: committer-date
      type: string
      value: '1697957433'
    - name: url
      type: string
      value: 'https://github.com/kvabakoma/collabothon2023-frontend.git'
  taskSpec:
    description: >-
      These Tasks are Git tasks to work with repositories used by other tasks in
      your Pipeline.

      The git-clone Task will clone a repo from the provided url into the output
      Workspace. By default the repo will be cloned into the root of your
      Workspace. You can clone into a subdirectory by setting this Task's
      subdirectory param. This Task also supports sparse checkouts. To perform a
      sparse checkout, pass a list of comma separated directory patterns to this
      Task's sparseCheckoutDirectories param.
    params:
      - description: Repository URL to clone from.
        name: url
        type: string
      - default: ''
        description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
        name: revision
        type: string
      - default: ''
        description: Refspec to fetch before checking out revision.
        name: refspec
        type: string
      - default: 'true'
        description: Initialize and fetch git submodules.
        name: submodules
        type: string
      - default: '1'
        description: 'Perform a shallow clone, fetching only the most recent N commits.'
        name: depth
        type: string
      - default: 'true'
        description: >-
          Set the `http.sslVerify` global git config. Setting this to `false` is
          not advised unless you are sure that you trust your git remote.
        name: sslVerify
        type: string
      - default: ca-bundle.crt
        description: >-
          file name of mounted crt using ssl-ca-directory workspace. default
          value is ca-bundle.crt.
        name: crtFileName
        type: string
      - default: ''
        description: Subdirectory inside the `output` Workspace to clone the repo into.
        name: subdirectory
        type: string
      - default: ''
        description: >-
          Define the directory patterns to match or exclude when performing a
          sparse checkout.
        name: sparseCheckoutDirectories
        type: string
      - default: 'true'
        description: >-
          Clean out the contents of the destination directory if it already
          exists before cloning.
        name: deleteExisting
        type: string
      - default: ''
        description: HTTP proxy server for non-SSL requests.
        name: httpProxy
        type: string
      - default: ''
        description: HTTPS proxy server for SSL requests.
        name: httpsProxy
        type: string
      - default: ''
        description: Opt out of proxying HTTP/HTTPS requests.
        name: noProxy
        type: string
      - default: 'true'
        description: Log the commands that are executed during `git-clone`'s operation.
        name: verbose
        type: string
      - default: >-
          gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2
        description: The image providing the git-init binary that this Task runs.
        name: gitInitImage
        type: string
      - default: /home/git
        description: |
          Absolute path to the user's home directory.
        name: userHome
        type: string
    results:
      - description: The precise commit SHA that was fetched by this Task.
        name: commit
        type: string
      - description: The precise URL that was fetched by this Task.
        name: url
        type: string
      - description: The epoch timestamp of the commit that was fetched by this Task.
        name: committer-date
        type: string
    steps:
      - env:
          - name: HOME
            value: /home/git
          - name: PARAM_URL
            value: 'https://github.com/kvabakoma/collabothon2023-frontend.git'
          - name: PARAM_REVISION
          - name: PARAM_REFSPEC
          - name: PARAM_SUBMODULES
            value: 'true'
          - name: PARAM_DEPTH
            value: '1'
          - name: PARAM_SSL_VERIFY
            value: 'true'
          - name: PARAM_CRT_FILENAME
            value: ca-bundle.crt
          - name: PARAM_SUBDIRECTORY
          - name: PARAM_DELETE_EXISTING
            value: 'true'
          - name: PARAM_HTTP_PROXY
          - name: PARAM_HTTPS_PROXY
          - name: PARAM_NO_PROXY
          - name: PARAM_VERBOSE
            value: 'true'
          - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          - name: PARAM_USER_HOME
            value: /home/git
          - name: WORKSPACE_OUTPUT_PATH
            value: /workspace/output
          - name: WORKSPACE_SSH_DIRECTORY_BOUND
            value: 'false'
          - name: WORKSPACE_SSH_DIRECTORY_PATH
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
            value: 'false'
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
            value: 'false'
          - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        image: >-
          gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2
        name: clone
        resources: {}
        script: >
          #!/usr/bin/env sh

          set -eu


          if [ "${PARAM_VERBOSE}" = "true" ] ; then
            set -x
          fi


          if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
            cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
            cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
            chmod 400 "${PARAM_USER_HOME}/.git-credentials"
            chmod 400 "${PARAM_USER_HOME}/.gitconfig"
          fi


          if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
            cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
            chmod 700 "${PARAM_USER_HOME}"/.ssh
            chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
          fi


          if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
             export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
             if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
             fi
          fi

          CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"


          cleandir() {
            # Delete any existing contents of the repo directory if it exists.
            #
            # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
            # or the root of a mounted volume.
            if [ -d "${CHECKOUT_DIR}" ] ; then
              # Delete non-hidden files and directories
              rm -rf "${CHECKOUT_DIR:?}"/*
              # Delete files and directories starting with . but excluding ..
              rm -rf "${CHECKOUT_DIR}"/.[!.]*
              # Delete files and directories starting with .. plus any other character
              rm -rf "${CHECKOUT_DIR}"/..?*
            fi
          }


          if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
            cleandir || true
          fi


          test -z "${PARAM_HTTP_PROXY}" || export
          HTTP_PROXY="${PARAM_HTTP_PROXY}"

          test -z "${PARAM_HTTPS_PROXY}" || export
          HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

          test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"


          git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"

          /ko-app/git-init \
            -url="${PARAM_URL}" \
            -revision="${PARAM_REVISION}" \
            -refspec="${PARAM_REFSPEC}" \
            -path="${CHECKOUT_DIR}" \
            -sslVerify="${PARAM_SSL_VERIFY}" \
            -submodules="${PARAM_SUBMODULES}" \
            -depth="${PARAM_DEPTH}" \
            -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
          cd "${CHECKOUT_DIR}"

          RESULT_SHA="$(git rev-parse HEAD)"

          EXIT_CODE="$?"

          if [ "${EXIT_CODE}" != 0 ] ; then
            exit "${EXIT_CODE}"
          fi

          RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"

          printf "%s" "${RESULT_COMMITTER_DATE}" >
          "/tekton/results/committer-date"

          printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"

          printf "%s" "${PARAM_URL}" > "/tekton/results/url"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
    workspaces:
      - description: The git repo will be cloned onto the volume backing this Workspace.
        name: output
      - description: >
          A .ssh directory with private key, known_hosts, config, etc. Copied to

          the user's home before git commands are executed. Used to authenticate

          with the git remote when performing the clone. Binding a Secret to
          this

          Workspace is strongly recommended over other volume types.
        name: ssh-directory
        optional: true
      - description: |
          A Workspace containing a .gitconfig and .git-credentials file. These
          will be copied to the user's home before any git commands are run. Any
          other files in this Workspace are ignored. It is strongly recommended
          to use ssh-directory over basic-auth whenever possible and to bind a
          Secret to this Workspace over other volume types.
        name: basic-auth
        optional: true
      - description: |
          A workspace containing CA certificates, this will be used by Git to
          verify the peer with when fetching or pushing over HTTPS.
        name: ssl-ca-directory
        optional: true
